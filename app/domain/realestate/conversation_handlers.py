"""
Handlers de est√°gios da conversa do chatbot imobili√°rio.
Responsabilidade: L√≥gica de transi√ß√£o entre est√°gios e processamento de entrada.
"""
from typing import Dict, Any, Optional, Tuple
import os
from sqlalchemy.orm import Session
from app.domain.realestate import detection_utils as detect
from app.domain.realestate import message_formatters as fmt
from app.domain.realestate.models import Property, PropertyImage, Lead
from app.services.lead_service import LeadService
from sqlalchemy import select
from app.core.config import settings
from app.domain.realestate.validation_utils import (
    validate_bedrooms, validate_price, validate_city, validate_property_type,
    is_response_in_context, get_retry_limit_message, get_context_validation_message,
    apply_fallback_values
)


class ConversationHandler:
    """Gerenciador de est√°gios da conversa."""
    
    def __init__(self, db: Session):
        self.db = db
    
    def _increment_retry_count(self, state: Dict[str, Any], stage: str) -> int:
        """Incrementa contador de tentativas para um est√°gio espec√≠fico."""
        retry_key = f"{stage}_retry_count"
        current_count = state.get(retry_key, 0)
        new_count = current_count + 1
        state[retry_key] = new_count
        return new_count
    
    def _check_retry_limit(self, state: Dict[str, Any], stage: str, max_retries: int = 3) -> bool:
        """Verifica se atingiu limite de tentativas."""
        retry_key = f"{stage}_retry_count"
        return state.get(retry_key, 0) >= max_retries
    
    def handle_start(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """
        Est√°gio inicial: detecta lead direcionado ou inicia sauda√ß√£o.
        
        Returns:
            (mensagem, novo_state, continuar_loop)
        """
        # Detectar lead direcionado
        imovel_id = detect.resolve_property_id_by_code_or_url(self.db, text)
        if imovel_id:
            state["directed_property_id"] = imovel_id
            state["stage"] = "show_directed_property"
            return ("", state, True)  # Continuar loop
        
        # Lead frio - sauda√ß√£o
        if detect.is_greeting(text):
            msg = fmt.format_welcome_message()
            state["stage"] = "awaiting_lgpd_consent"
            return (msg, state, False)
        else:
            # N√£o √© sauda√ß√£o, avan√ßar para LGPD
            state["stage"] = "awaiting_lgpd_consent"
            return ("", state, True)
    
    def handle_lgpd_consent(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de consentimento LGPD."""
        if detect.detect_consent(text):
            state["lgpd_consent"] = True
            
            # Tentar extrair nome do usu√°rio do hist√≥rico (LLM j√° processou)
            ent = state.get("llm_entities") or {}
            user_name = ent.get("nome_usuario")
            
            if user_name:
                # Nome encontrado - usar imediatamente
                state["user_name"] = user_name
                state["stage"] = "awaiting_purpose"
                msg = f"Legal, {user_name}! Para come√ßarmos, me diga: voc√™ procura um im√≥vel para *comprar* ou para *alugar*?"
                return (msg, state, False)
            else:
                # Nome n√£o encontrado - perguntar
                state["stage"] = "awaiting_name"
                msg = "Perfeito! Para personalizar nosso atendimento, como posso te chamar? üòä"
                return (msg, state, False)
        else:
            msg = "Por favor, responda com 'sim' ou 'autorizo' para que possamos continuar com seguran√ßa. üîí"
            return (msg, state, False)
    
    def handle_name(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de captura de nome do usu√°rio."""
        import structlog
        log = structlog.get_logger()
        
        # Tentar extrair nome via LLM primeiro
        ent = state.get("llm_entities") or {}
        user_name = ent.get("nome_usuario")
        
        # Se LLM n√£o extraiu, usar primeira palavra do texto (fallback)
        if not user_name:
            user_name = text.strip().split()[0].title()
        
        state["user_name"] = user_name
        
        # BIFURCA√á√ÉO: Perguntar se j√° tem im√≥vel em mente
        state["stage"] = "awaiting_has_property_in_mind"
        msg = fmt.format_has_property_in_mind(user_name)
        
        log.info("üîÄ BIFURCA√á√ÉO", user_name=user_name, next_stage="awaiting_has_property_in_mind")
        return (msg, state, False)
    
    # ===== FLUXO DIRECIONADO =====
    
    def handle_has_property_in_mind(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Pergunta se cliente j√° tem im√≥vel espec√≠fico."""
        import structlog
        log = structlog.get_logger()
        
        text_lower = text.lower().strip()
        user_name = state.get("user_name", "")
        
        # Detectar n√∫meros 1 ou 2 PRIMEIRO
        if text_lower in ['1', '1Ô∏è‚É£', 'um', 'primeiro']:
            detection_result = "yes"
        elif text_lower in ['2', '2Ô∏è‚É£', 'dois', 'segundo']:
            detection_result = "no"
        else:
            # Detec√ß√£o inteligente de varia√ß√µes
            # "me ajuda", "quero buscar", "n√£o sei" = N√ÉO tem im√≥vel
            help_keywords = ["ajuda", "ajudar", "buscar", "procurar", "encontrar", "n√£o sei", "nao sei"]
            has_help_intent = any(kw in text_lower for kw in help_keywords)
            
            # Detec√ß√£o de sim/n√£o tradicional
            detection_result = detect.detect_yes_no(text)
            log.info("üîç detect_yes_no", text=text, result=detection_result, has_help_intent=has_help_intent)
            
            # Se detectou "me ajuda", for√ßar "no"
            if has_help_intent:
                detection_result = "no"
        
        log.info("üîç Final detection", text=text, result=detection_result)
        
        if detection_result == "yes":
            state["stage"] = "awaiting_property_code"
            msg = fmt.format_request_property_code()
            log.info("‚úÖ Cliente TEM im√≥vel em mente", next_stage="awaiting_property_code")
            return (msg, state, False)
        elif detection_result == "no":
            # Ir para fluxo de qualifica√ß√£o
            state["stage"] = "awaiting_purpose"
            name_prefix = f"{user_name}, " if user_name else ""
            msg = f"Perfeito, {name_prefix}vou te ajudar a encontrar o im√≥vel ideal!\n\nPara come√ßar, voc√™ quer:\n\n1Ô∏è‚É£ *Comprar* um im√≥vel\n2Ô∏è‚É£ *Alugar* um im√≥vel\n\nDigite 1 ou 2, ou escreva 'comprar' ou 'alugar'."
            log.info("‚ùå Cliente N√ÉO tem im√≥vel em mente", next_stage="awaiting_purpose")
            return (msg, state, False)
        else:
            # Incrementar contador de tentativas
            retry_count = self._increment_retry_count(state, "awaiting_has_property_in_mind")
            
            if self._check_retry_limit(state, "awaiting_has_property_in_mind", max_retries=2):
                # Ap√≥s 2 tentativas, assume "n√£o" e continua
                state["stage"] = "awaiting_purpose"
                msg = f"Tudo bem, {user_name}! Vou considerar que voc√™ quer que eu te ajude a buscar.\n\nVoc√™ quer:\n\n1Ô∏è‚É£ *Comprar* um im√≥vel\n2Ô∏è‚É£ *Alugar* um im√≥vel"
                log.info("‚ö†Ô∏è Limite de tentativas - assumindo fluxo de busca", retry_count=retry_count)
                return (msg, state, False)
            else:
                msg = f"Desculpe, {user_name}, n√£o entendi. Vou ser mais claro:\n\n*Voc√™ j√° viu algum im√≥vel espec√≠fico que te interessou?*\n\n1Ô∏è‚É£ *Sim* - J√° tenho um c√≥digo/refer√™ncia\n2Ô∏è‚É£ *N√£o* - Quero que voc√™ me ajude a buscar\n\nDigite 1 ou 2, ou escreva 'sim' ou 'n√£o'."
                log.warning("‚ö†Ô∏è N√£o detectou sim/n√£o", text=text, retry_count=retry_count)
                return (msg, state, False)
    
    def handle_property_code(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Busca im√≥vel por c√≥digo."""
        import structlog
        log = structlog.get_logger()
        codigo = detect.extract_property_code(text)
        if not codigo:
            msg = "Por favor, informe o c√≥digo do im√≥vel (ex: A1234, ND12345, ou apenas o n√∫mero)."
            return (msg, state, False)

        code_upper = codigo.strip().upper()
        candidates = [code_upper]
        if code_upper.isdigit():
            candidates.extend([f"A{code_upper}", f"ND{code_upper}"])
        log.info("property_code_candidates", input=text, extracted=code_upper, candidates=candidates)

        # Depura√ß√£o do caminho do banco (√∫til para SQLite)
        try:
            bind = self.db.get_bind()
            db_url_actual = str(getattr(bind, "url", None) or "")
            db_file = getattr(getattr(bind, "url", None), "database", None)
            abs_db_file = os.path.abspath(db_file) if db_file else None
            log.info("db_debug", db_url_actual=db_url_actual, db_file=db_file, db_file_abs=abs_db_file, cwd=os.getcwd())
        except Exception:
            pass

        q = self.db.query(Property.id).filter(Property.ref_code.in_(candidates))
        cnt = q.count()
        log.info("property_code_query_count", count=cnt, db_url=settings.DATABASE_URL)
        prop = self.db.query(Property).filter(Property.ref_code.in_(candidates)).first()
        log.info("property_code_query_result", found_id=(prop.id if prop else None))

        if not prop:
            # Diagn√≥stico extra: quantos com ref_code n√£o-nulo existem neste DB?
            try:
                total_with_ref = self.db.query(Property).filter(Property.ref_code.isnot(None)).count()
                sample = (
                    self.db.query(Property.ref_code)
                    .filter(Property.ref_code.isnot(None))
                    .limit(5)
                    .all()
                )
                log.info("property_ref_debug", total_with_ref=total_with_ref, sample=[s[0] for s in sample])
            except Exception:
                pass

            # Fallback: tentar por external_id (muitos imports ND salvam esse mesmo c√≥digo como external_id)
            prop = (
                self.db.query(Property)
                .filter(Property.external_id.in_(candidates))
                .first()
            )
            log.info("property_code_fallback_external_id", found_id=(prop.id if prop else None))

        if not prop:
            msg = fmt.format_property_not_found(code_upper)
            return (msg, state, False)

        # Salvar no estado
        state["directed_property_id"] = prop.id
        state["directed_property_code"] = prop.ref_code or code_upper

        # Montar detalhes com nomes corretos das colunas
        prop_dict = {
            "id": prop.id,
            "ref_code": prop.ref_code,
            "tipo": prop.type.value if getattr(prop, "type", None) else None,
            "preco": float(prop.price) if getattr(prop, "price", None) is not None else 0,
            "dormitorios": getattr(prop, "bedrooms", None),
            "banheiros": getattr(prop, "bathrooms", None),
            "vagas": getattr(prop, "parking_spots", None),
            "area_total": float(prop.area_total) if getattr(prop, "area_total", None) is not None else None,
            "bairro": getattr(prop, "address_neighborhood", None),
            "cidade": getattr(prop, "address_city", None),
            "estado": getattr(prop, "address_state", None),
            "descricao": getattr(prop, "description", None),
        }

        msg = fmt.format_property_found_details(prop_dict)
        state["stage"] = "awaiting_property_questions"
        return (msg, state, False)
    
    def handle_property_questions(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Responde d√∫vidas sobre o im√≥vel."""
        import structlog
        log = structlog.get_logger()
        
        # Detectar se quer ver outras op√ß√µes (HARDCODE + LLM para robustez)
        text_lower = text.lower().strip()
        
        # 1) HARDCODE: Detec√ß√£o r√°pida e determin√≠stica
        wants_other_options = any(kw in text_lower for kw in [
            "outro", "outra", "outras", "mais op√ß√µes", "mais opcoes", 
            "ver outros", "ver outras", "outras op√ß√µes", "outras opcoes",
            "outro im√≥vel", "outro imovel", "outros im√≥veis", "outros imoveis",
            "mais im√≥veis", "mais imoveis", "pr√≥ximo", "proximo", "pr√≥xima",
            "ver mais", "mostrar mais", "outras sugest√µes", "outras sugestoes"
        ])
        
        # 2) LLM FALLBACK: Se n√£o detectou por hardcode, consulta LLM
        if not wants_other_options:
            try:
                # Usar a fun√ß√£o existente que j√° tem hardcode + LLM
                wants_other_options = detect.detect_next_property(text)
                if wants_other_options:
                    log.info("llm_detected_other_properties_intent", text=text)
            except Exception as e:
                log.warning("llm_detection_failed", error=str(e), text=text)
                # Mant√©m o valor do hardcode se LLM falhar
        
        if wants_other_options:
            log.info("user_wants_other_properties", text=text)
            # Perguntar se quer buscar com crit√©rios ou ver outro c√≥digo
            msg = (
                "Entendi que voc√™ quer ver outras op√ß√µes! üè†\n\n"
                "Voc√™ prefere:\n"
                "1Ô∏è‚É£ Informar outro c√≥digo de im√≥vel espec√≠fico\n"
                "2Ô∏è‚É£ Fazer uma busca personalizada (por tipo, cidade, pre√ßo)\n\n"
                "Digite *1* para c√≥digo ou *2* para busca personalizada."
            )
            state["stage"] = "awaiting_search_choice"
            return (msg, state, False)
        
        if detect.detect_yes_no(text) == "no":
            # Sem d√∫vidas, perguntar sobre agendamento
            state["stage"] = "awaiting_schedule_visit_question"
            msg = fmt.format_ask_schedule_visit()
            return (msg, state, False)
        else:
            # Tem d√∫vidas - responder genericamente e perguntar sobre agendamento
            msg = (
                "Entendo! Para mais detalhes espec√≠ficos, nossa equipe pode te ajudar melhor durante uma visita. üòä\n\n"
                + fmt.format_ask_schedule_visit()
            )
            state["stage"] = "awaiting_schedule_visit_question"
            return (msg, state, False)
    
    def handle_search_choice(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Processa escolha entre informar c√≥digo ou fazer busca personalizada."""
        import structlog
        log = structlog.get_logger()
        
        text_clean = text.strip()
        
        # Op√ß√£o 1: Informar outro c√≥digo
        if text_clean in ["1", "c√≥digo", "codigo"]:
            log.info("user_chose_code_search")
            state["stage"] = "awaiting_property_code"
            msg = "Por favor, informe o c√≥digo do im√≥vel que deseja ver (ex: A1234, ND12345)."
            return (msg, state, False)
        
        # Op√ß√£o 2: Busca personalizada
        elif text_clean in ["2", "busca", "personalizada", "buscar"]:
            log.info("user_chose_custom_search")
            # Limpar dados do im√≥vel anterior mas manter nome e LGPD
            user_name = state.get("user_name")
            lgpd_consent = state.get("lgpd_consent")
            sender_id = state.get("sender_id")
            
            # Resetar estado para busca
            state = {
                "sender_id": sender_id,
                "user_name": user_name,
                "lgpd_consent": lgpd_consent,
                "stage": "awaiting_purpose"
            }
            msg = "Perfeito! Vamos fazer uma busca personalizada.\n\nVoc√™ procura im√≥vel para *comprar* ou *alugar*?"
            return (msg, state, False)
        
        # Entrada inv√°lida
        else:
            msg = "Por favor, digite:\n*1* para informar um c√≥digo de im√≥vel\n*2* para fazer uma busca personalizada"
            return (msg, state, False)
    
    def handle_schedule_visit_question(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Pergunta se quer agendar visita."""
        # Aceitar sim/n√£o ou inten√ß√£o expl√≠cita de agendar
        wants_schedule = (detect.detect_yes_no(text) == "yes" or detect.detect_schedule_intent(text))
        if wants_schedule:
            # Confirmar telefone
            sender_id = state.get("sender_id", "")
            phone = sender_id.split("@")[0] if "@" in sender_id else sender_id
            
            state["visit_phone"] = phone
            state["stage"] = "awaiting_phone_confirmation"
            msg = fmt.format_confirm_phone(phone)
            return (msg, state, False)
        else:
            # Recusou agendamento: classificar como qualificado e encerrar
            try:
                from app.services.lead_service import LeadService as _LS
                _LS.mark_qualified(self.db, state.get("sender_id", ""), state)
            except Exception:
                pass
            msg = "Sem problemas! Se mudar de ideia, √© s√≥ me chamar. üòä\n\nPosso te ajudar com algo mais?"
            return (msg, {}, False)  # Limpar estado
    
    def handle_phone_confirmation(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Confirma ou solicita telefone alternativo."""
        text_lower = text.lower().strip()
        
        # PRIORIDADE 1: Usar detect_yes_no que j√° usa LLM
        response = detect.detect_yes_no(text)
        
        if response == "yes":
            # Telefone confirmado, solicitar data
            state["stage"] = "awaiting_visit_date"
            msg = fmt.format_request_visit_date()
            return (msg, state, False)
        elif response == "no":
            # Solicitar telefone alternativo
            state["stage"] = "awaiting_phone_input"
            msg = fmt.format_request_alternative_phone()
            return (msg, state, False)
        else:
            # Fallback: palavras-chave apenas para casos claros
            positive_words = ["sim", "correto", "ok", "confirmo", "esse mesmo", "est√° correto", "esta correto", "yes", "certo", "isso", "exato"]
            if any(word == text_lower for word in positive_words):  # Match exato
                state["stage"] = "awaiting_visit_date"
                msg = fmt.format_request_visit_date()
                return (msg, state, False)
            else:
                # Se n√£o for claro, pedir telefone alternativo
                state["stage"] = "awaiting_phone_input"
                msg = fmt.format_request_alternative_phone()
                return (msg, state, False)
    
    def handle_phone_input(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Captura e valida telefone alternativo."""
        from app.services.visit_service import VisitService
        
        # Detectar se usu√°rio quer usar o telefone atual (confirma√ß√£o positiva)
        text_lower = text.lower().strip()
        positive_words = ["sim", "correto", "ok", "confirmo", "esse mesmo", "est√° correto", "esta correto"]
        if any(word in text_lower for word in positive_words):
            # Usar telefone j√° salvo
            phone = state.get("visit_phone")
            if phone:
                state["stage"] = "awaiting_visit_date"
                msg = fmt.format_request_visit_date()
                return (msg, state, False)
        
        # Tentar validar como telefone
        is_valid, formatted_phone = VisitService.validate_phone(text)
        
        if is_valid:
            state["visit_phone"] = formatted_phone
            state["stage"] = "awaiting_visit_date"
            msg = fmt.format_request_visit_date()
            return (msg, state, False)
        else:
            msg = fmt.format_invalid_phone()
            return (msg, state, False)
    
    def handle_visit_date(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Captura data da visita."""
        from app.services.visit_service import VisitService
        
        parsed_date = VisitService.parse_date_input(text)
        
        if parsed_date:
            state["visit_date"] = parsed_date.isoformat()
            state["visit_date_display"] = parsed_date.strftime("%d/%m/%Y")
            state["stage"] = "awaiting_visit_time"
            msg = fmt.format_request_visit_time()
            return (msg, state, False)
        else:
            msg = fmt.format_invalid_date()
            return (msg, state, False)
    
    def handle_visit_time(self, text: str, sender_id: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Captura hor√°rio e cria agendamento."""
        from app.services.visit_service import VisitService
        from app.services.notification_service import NotificationService
        from app.services.lead_service import LeadService
        from datetime import datetime
        
        # Parse da data base
        visit_date_str = state.get("visit_date")
        if not visit_date_str:
            msg = "Erro: data n√£o encontrada. Vamos recome√ßar o agendamento."
            state["stage"] = "awaiting_visit_date"
            return (msg, state, False)
        
        visit_date = datetime.fromisoformat(visit_date_str)
        parsed_time = VisitService.parse_time_input(text, visit_date)
        
        if not parsed_time:
            msg = fmt.format_invalid_time()
            return (msg, state, False)
        
        # Criar agendamento
        user_name = state.get("user_name", "Cliente")
        phone_display = state.get("visit_phone", sender_id.split("@")[0] if "@" in sender_id else sender_id)
        phone_full = sender_id  # Sempre usar sender_id completo (com @c.us) para salvar no banco
        
        # Buscar property_id de ambos os fluxos (direcionado ou busca assistida)
        property_id = state.get("directed_property_id") or state.get("interested_property_id")
        property_code = state.get("directed_property_code", "")
        
        # Buscar ou criar lead por telefone (buscar com e sem @c.us para compatibilidade)
        lead = self.db.query(Lead).filter(
            (Lead.phone == phone_full) | (Lead.phone == phone_display)
        ).first()
        
        # Buscar dados do im√≥vel para preencher o lead
        property_data = {}
        if property_id:
            try:
                prop = self.db.query(Property).filter(Property.id == property_id).first()
                if prop:
                    property_data = {
                        "finalidade": prop.purpose.value if prop.purpose else None,
                        "tipo": prop.type.value if prop.type else None,
                        "cidade": prop.address_city,
                        "estado": prop.address_state,
                        "bairro": prop.address_neighborhood,
                        "dormitorios": prop.bedrooms,
                        "preco_min": prop.price,
                        "preco_max": prop.price,
                        "ref_code": prop.ref_code,  # C√≥digo ND Im√≥veis (ex: A738)
                    }
            except Exception:
                pass
        
        # Extrair dados do state (busca assistida) ou do im√≥vel (c√≥digo direto)
        import structlog
        log = structlog.get_logger()
        log.info("üîç DADOS PARA LEAD", 
                 state_bedrooms=state.get("bedrooms"),
                 state_purpose=state.get("purpose"),
                 state_city=state.get("city"),
                 property_bedrooms=property_data.get("dormitorios"))
        pref_bedrooms = state.get("bedrooms")
        try:
            pref_bedrooms = int(pref_bedrooms) if pref_bedrooms is not None else None
        except Exception:
            pref_bedrooms = None

        lead_updates = {
            "name": user_name,
            "status": "agendado",
            "property_interest_id": property_id,
            "external_property_id": property_data.get("ref_code"),  # C√≥digo ND Im√≥veis (A738)
            # Priorizar dados do state (busca), fallback para dados do im√≥vel (c√≥digo direto)
            "finalidade": state.get("purpose") or property_data.get("finalidade"),
            "tipo": state.get("type") or property_data.get("tipo"),
            "cidade": state.get("city") or property_data.get("cidade"),
            "estado": state.get("state") or property_data.get("estado"),
            "bairro": state.get("neighborhood") or property_data.get("bairro"),
            "dormitorios": (pref_bedrooms if pref_bedrooms is not None else property_data.get("dormitorios")),
            "preco_min": state.get("price_min") or property_data.get("preco_min"),
            "preco_max": state.get("price_max") or property_data.get("preco_max"),
            "last_inbound_at": datetime.utcnow(),
        }
        
        if not lead:
            lead_data = {
                "nome": user_name,
                "telefone": phone_full,  # Salvar com @c.us
                "origem": "whatsapp",
                "status": "agendado",
                "property_interest_id": property_id,
            }
            lead = LeadService.create_lead(self.db, lead_data)
        
        # Atualizar todos os campos do lead (sempre atualizar name, mesmo se j√° existir)
        for key, value in lead_updates.items():
            if key == "name" or value is not None:  # Sempre atualizar name
                setattr(lead, key, value)
        
        self.db.commit()
        
        # Criar agendamento
        visit_id = VisitService.create_visit(
            db=self.db,
            lead_id=lead.id,
            property_id=property_id,
            phone=phone_full,  # Salvar com @c.us
            visit_datetime=parsed_time,
            notes=f"Agendamento via WhatsApp - Im√≥vel #{property_code}"
        )
        
        # Notificar equipe via WhatsApp (log por enquanto)
        NotificationService.notify_visit_scheduled(
            visit_id=visit_id,
            property_id=property_id,
            lead_name=user_name,
            phone=phone_display,  # Mostrar sem @c.us na notifica√ß√£o
            visit_datetime=parsed_time.isoformat()
        )
        
        # Mensagem de confirma√ß√£o
        date_display = state.get("visit_date_display", parsed_time.strftime("%d/%m/%Y"))
        time_display = parsed_time.strftime("%H:%M")
        
        msg = fmt.format_visit_scheduled(user_name, date_display, time_display, property_code)
        
        return (msg, {}, False)  # Limpar estado
    
    # ===== FLUXO QUALIFICA√á√ÉO =====
    
    def handle_purpose(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de finalidade (comprar/alugar)."""
        import structlog
        log = structlog.get_logger()
        
        text_lower = text.lower().strip()
        user_name = state.get("user_name", "")
        
        # Detectar n√∫meros 1 ou 2
        if text_lower in ['1', '1Ô∏è‚É£', 'um', 'primeiro']:
            purpose = 'sale'
        elif text_lower in ['2', '2Ô∏è‚É£', 'dois', 'segundo']:
            purpose = 'rent'
        else:
            # Verificar contexto da resposta
            if not is_response_in_context(text, "purpose"):
                msg = get_context_validation_message("purpose")
                return (msg, state, False)
            
            # Priorizar LLM
            ent = (state.get("llm_entities") or {})
            purpose = ent.get("finalidade") or detect.detect_purpose(text)
        
        log.info("detect_purpose_result", text=text, detected_purpose=purpose)
        
        if purpose:
            state["purpose"] = purpose
            state["stage"] = "awaiting_type"
            purpose_txt = "comprar" if purpose == "sale" else "alugar"
            msg = f"Perfeito{', ' + user_name if user_name else ''}! Voc√™ quer {purpose_txt}.\n\nAgora me diga, que tipo de im√≥vel voc√™ prefere:\n\n1Ô∏è‚É£ *Casa*\n2Ô∏è‚É£ *Apartamento*\n3Ô∏è‚É£ *Comercial*\n4Ô∏è‚É£ *Terreno*\n\nDigite o n√∫mero ou o nome do tipo."
            log.info("purpose_detected", purpose=purpose, next_stage="awaiting_type")
            return (msg, state, False)
        else:
            # Incrementar contador de tentativas
            retry_count = self._increment_retry_count(state, "awaiting_purpose")
            
            if self._check_retry_limit(state, "awaiting_purpose"):
                # Atingiu limite - usar valor padr√£o e continuar
                state["purpose"] = "sale"  # Padr√£o: venda
                state["stage"] = "awaiting_type"
                msg = get_retry_limit_message("awaiting_purpose", retry_count)
                msg += f"\n\nQue tipo de im√≥vel voc√™ prefere:\n\n1Ô∏è‚É£ *Casa*\n2Ô∏è‚É£ *Apartamento*\n3Ô∏è‚É£ *Comercial*\n4Ô∏è‚É£ *Terreno*"
                return (msg, state, False)
            else:
                name_prefix = f"{user_name}, " if user_name else ""
                msg = f"{name_prefix}n√£o entendi. Por favor, escolha uma op√ß√£o:\n\n1Ô∏è‚É£ *Comprar* um im√≥vel\n2Ô∏è‚É£ *Alugar* um im√≥vel\n\nDigite 1 ou 2, ou escreva 'comprar' ou 'alugar'."
                log.warning("purpose_not_detected", text=text, retry_count=retry_count)
                return (msg, state, False)
    
    def handle_city(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de cidade."""
        import structlog
        log = structlog.get_logger()
        
        # Verificar contexto da resposta
        if not is_response_in_context(text, "city"):
            msg = get_context_validation_message("city")
            return (msg, state, False)
        
        ent = (state.get("llm_entities") or {})
        cidade_raw = ent.get("cidade") or text
        cidade = validate_city(cidade_raw)
        
        if cidade:
            state["city"] = cidade
            
            # Log para debug: verificar se type est√° preservado
            log.info("handle_city_state", 
                     city=cidade,
                     type=state.get("type"),
                     purpose=state.get("purpose"),
                     price_max=state.get("price_max"))
                
            # Se j√° tem tipo e pre√ßo (refinamento), buscar direto ap√≥s bairro
            if state.get("type") and state.get("price_max"):
                state["stage"] = "awaiting_neighborhood"
            else:
                state["stage"] = "awaiting_neighborhood"
            user_name = state.get("user_name", "")
            msg = f"√ìtimo{', ' + user_name if user_name else ''}! Voc√™ tem prefer√™ncia por algum *bairro* em {cidade}? (ou 'n√£o')"
            return (msg, state, False)
        else:
            # Incrementar contador de tentativas
            retry_count = self._increment_retry_count(state, "awaiting_city")
            
            if self._check_retry_limit(state, "awaiting_city"):
                # Atingiu limite - usar valor padr√£o
                state = apply_fallback_values(state, "awaiting_city")
                state["stage"] = "awaiting_neighborhood"
                msg = get_retry_limit_message("awaiting_city", retry_count)
                msg += f"\n\nVoc√™ tem prefer√™ncia por algum *bairro* em {state['city']}? (ou 'n√£o')"
                return (msg, state, False)
            else:
                user_name = state.get("user_name", "")
                name_prefix = f"{user_name}, " if user_name else ""
                msg = f"{name_prefix}n√£o consegui identificar a cidade. Por favor, informe uma cidade v√°lida.\n\nüí° Exemplos: 'S√£o Paulo', 'Mogi das Cruzes', 'Santos'"
                return (msg, state, False)
    
    def handle_type(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de tipo de im√≥vel."""
        import structlog
        log = structlog.get_logger()
        
        text_lower = text.lower().strip()
        user_name = state.get("user_name", "")
        
        log.info("handle_type_start", 
                 input_text=text, 
                 current_stage=state.get("stage"),
                 has_purpose=bool(state.get("purpose")),
                 purpose_value=state.get("purpose"))
        
        # Detectar n√∫meros 1-4
        if text_lower in ['1', '1Ô∏è‚É£', 'um', 'primeiro']:
            prop_type = 'house'
        elif text_lower in ['2', '2Ô∏è‚É£', 'dois', 'segundo']:
            prop_type = 'apartment'
        elif text_lower in ['3', '3Ô∏è‚É£', 'tr√™s', 'tres', 'terceiro']:
            prop_type = 'commercial'
        elif text_lower in ['4', '4Ô∏è‚É£', 'quatro', 'quarto']:
            prop_type = 'land'
        else:
            # Verificar contexto da resposta
            if not is_response_in_context(text, "type"):
                msg = get_context_validation_message("type")
                log.info("handle_type_context_failed", input_text=text, message=msg)
                return (msg, state, False)
            
            # PRIORIDADE: detec√ß√£o local (mais confi√°vel que LLM para "ap")
            prop_type = detect.detect_property_type(text)
            if not prop_type:
                ent = (state.get("llm_entities") or {})
                prop_type_raw = ent.get("tipo")
                prop_type = validate_property_type(prop_type_raw)
        
        log.info("handle_type_detection", 
                 input_text=text, 
                 detected_type=prop_type, 
                 llm_entities=state.get("llm_entities"))
        
        if prop_type:
            state["type"] = prop_type
            state["stage"] = "awaiting_price_min"
            purpose_txt = "aluguel" if state.get("purpose") == "rent" else "compra"
            type_names = {'house': 'casa', 'apartment': 'apartamento', 'commercial': 'comercial', 'land': 'terreno'}
            type_display = type_names.get(prop_type, prop_type)
            msg = f"Entendido{', ' + user_name if user_name else ''}! Voc√™ quer {type_display}.\n\nQual o valor *m√≠nimo* que voc√™ considera para {purpose_txt}?\n\nüí° Exemplos: '200000', '200 mil', '200k'"
            
            log.info("handle_type_success", 
                     validated_type=prop_type,
                     new_stage=state["stage"],
                     purpose=state.get("purpose"),
                     message_preview=msg[:50] + "...")
            
            return (msg, state, False)
        else:
            # Incrementar contador de tentativas
            retry_count = self._increment_retry_count(state, "awaiting_type")
            
            if self._check_retry_limit(state, "awaiting_type"):
                # Atingiu limite - usar valor padr√£o
                state = apply_fallback_values(state, "awaiting_type")
                state["stage"] = "awaiting_price_min"
                purpose_txt = "aluguel" if state.get("purpose") == "rent" else "compra"
                msg = get_retry_limit_message("awaiting_type", retry_count)
                msg += f"\n\nQual o valor *m√≠nimo* que voc√™ considera para {purpose_txt}?\n\nüí° Exemplos: '200000', '200 mil', '200k'"
                return (msg, state, False)
            else:
                name_prefix = f"{user_name}, " if user_name else ""
                msg = f"{name_prefix}n√£o entendi o tipo. Por favor, escolha uma op√ß√£o:\n\n1Ô∏è‚É£ *Casa*\n2Ô∏è‚É£ *Apartamento*\n3Ô∏è‚É£ *Comercial*\n4Ô∏è‚É£ *Terreno*\n\nDigite o n√∫mero ou o nome."
                return (msg, state, False)
    
    def handle_price_min(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de pre√ßo m√≠nimo."""
        import structlog
        log = structlog.get_logger()
        
        log.info("handle_price_min_start", 
                 input_text=text, 
                 current_stage=state.get("stage"),
                 has_type=bool(state.get("type")),
                 type_value=state.get("type"),
                 has_purpose=bool(state.get("purpose")),
                 purpose_value=state.get("purpose"))
        
        # Verificar contexto da resposta
        if not is_response_in_context(text, "price"):
            msg = get_context_validation_message("price")
            log.info("handle_price_min_context_failed", input_text=text, message=msg)
            return (msg, state, False)
        
        # PRIORIDADE: extract_price (regex/extenso) sobre LLM
        price_min = detect.extract_price(text)
        if price_min is None:
            ent = (state.get("llm_entities") or {})
            price_min = ent.get("preco_min")
        
        # Validar pre√ßo
        purpose = state.get("purpose", "sale")
        validated_price = validate_price(price_min, purpose)
        
        log.info("handle_price_min_detection", 
                 input_text=text, 
                 extracted_price=price_min, 
                 validated_price=validated_price,
                 purpose=purpose,
                 llm_entities=state.get("llm_entities"))
        
        if validated_price is not None:
            state["price_min"] = validated_price
            
            # Se j√° tem cidade (refinamento), buscar direto SEM mensagem
            if state.get("city"):
                state["stage"] = "searching"
                log.info("handle_price_min_refinement_search", 
                         price_min=validated_price,
                         has_city=True,
                         new_stage="searching")
                return ("", state, True)  # Busca silenciosa
            else:
                # Primeira vez, continuar fluxo normal
                state["stage"] = "awaiting_price_max"
                purpose_txt = "aluguel" if state.get("purpose") == "rent" else "compra"
                msg = f"Perfeito! E qual o valor *m√°ximo* para {purpose_txt}?"
                
                log.info("handle_price_min_success", 
                         price_min=validated_price,
                         new_stage=state["stage"],
                         purpose=purpose,
                         message_preview=msg[:30] + "...")
                
                return (msg, state, False)
        else:
            # Incrementar contador de tentativas
            retry_count = self._increment_retry_count(state, "awaiting_price_min")
            
            if self._check_retry_limit(state, "awaiting_price_min"):
                # Atingiu limite - usar valor padr√£o
                state = apply_fallback_values(state, "awaiting_price_min")
                
                if state.get("city"):
                    state["stage"] = "searching"
                    msg = get_retry_limit_message("awaiting_price_min", retry_count)
                    return (msg, state, False)
                else:
                    state["stage"] = "awaiting_price_max"
                    purpose_txt = "aluguel" if state.get("purpose") == "rent" else "compra"
                    msg = get_retry_limit_message("awaiting_price_min", retry_count)
                    msg += f"\n\nE qual o valor *m√°ximo* para {purpose_txt}?"
                    return (msg, state, False)
            else:
                purpose_txt = "aluguel" if state.get("purpose") == "rent" else "compra"
                range_txt = "R$ 300 a R$ 50.000" if purpose == "rent" else "R$ 50.000 a R$ 10.000.000"
                msg = f"N√£o consegui identificar o valor. Por favor, informe o valor m√≠nimo para {purpose_txt}.\n\nüí° Faixa v√°lida: {range_txt}\nüí° Exemplos: '200000', '200 mil', '200k'"
                return (msg, state, False)
    
    def handle_price_max(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de pre√ßo m√°ximo."""
        import structlog
        log = structlog.get_logger()
        
        log.info("handle_price_max_START", 
                 input_text=text, 
                 current_stage=state.get("stage"),
                 has_price_min=bool(state.get("price_min")),
                 price_min_value=state.get("price_min"),
                 has_type=bool(state.get("type")),
                 type_value=state.get("type"),
                 has_purpose=bool(state.get("purpose")),
                 purpose_value=state.get("purpose"))
        
        # Verificar contexto da resposta
        if not is_response_in_context(text, "price"):
            msg = get_context_validation_message("price")
            log.warning("handle_price_max_CONTEXT_FAIL", input_text=text, message=msg)
            return (msg, state, False)
        
        log.info("handle_price_max_CONTEXT_OK", input_text=text)
        
        # PRIORIDADE: extract_price (regex/extenso) sobre LLM
        price_max = detect.extract_price(text)
        log.info("handle_price_max_EXTRACT_PRICE", input_text=text, extracted_price=price_max)
        
        if price_max is None:
            ent = (state.get("llm_entities") or {})
            price_max = ent.get("preco_max")
            log.info("handle_price_max_LLM_FALLBACK", llm_entities=ent, llm_price_max=price_max)
        
        # Validar pre√ßo
        purpose = state.get("purpose", "sale")
        validated_price = validate_price(price_max, purpose)
        log.info("handle_price_max_VALIDATE_PRICE", 
                 raw_price=price_max, 
                 purpose=purpose, 
                 validated_price=validated_price)
        
        if validated_price is not None:
            state["price_max"] = validated_price
            log.info("handle_price_max_PRICE_SET", price_max=validated_price)
            
            # Se j√° tem cidade (refinamento), buscar direto SEM mensagem
            if state.get("city"):
                state["stage"] = "searching"
                log.info("handle_price_max_REFINEMENT_SEARCH", 
                         price_max=validated_price,
                         has_city=True,
                         new_stage="searching")
                return ("", state, True)  # Busca silenciosa
            else:
                # Primeira vez, continuar fluxo normal
                state["stage"] = "awaiting_bedrooms"
                msg = "√ìtimo! Quantos quartos voc√™ precisa?\n\nüí° Exemplos: '2', '3 quartos', 'tanto faz'"
                log.info("handle_price_max_SUCCESS", 
                         price_max=validated_price,
                         new_stage=state["stage"],
                         message=msg)
                return (msg, state, False)
        else:
            log.warning("handle_price_max_VALIDATION_FAILED", 
                       raw_price=price_max, 
                       purpose=purpose)
            
            # Incrementar contador de tentativas
            retry_count = self._increment_retry_count(state, "awaiting_price_max")
            log.info("handle_price_max_RETRY_COUNT", retry_count=retry_count)
            
            if self._check_retry_limit(state, "awaiting_price_max"):
                log.warning("handle_price_max_RETRY_LIMIT_REACHED", retry_count=retry_count)
                # Atingiu limite - usar valor padr√£o
                state = apply_fallback_values(state, "awaiting_price_max")
                
                if state.get("city"):
                    state["stage"] = "searching"
                    msg = get_retry_limit_message("awaiting_price_max", retry_count)
                    log.info("handle_price_max_FALLBACK_SEARCH", message=msg)
                    return (msg, state, False)
                else:
                    state["stage"] = "awaiting_bedrooms"
                    msg = get_retry_limit_message("awaiting_price_max", retry_count)
                    msg += "\n\nQuantos quartos voc√™ precisa?\n\nüí° Exemplos: '2', '3 quartos', 'tanto faz'"
                    log.info("handle_price_max_FALLBACK_BEDROOMS", message=msg)
                    return (msg, state, False)
            else:
                purpose_txt = "aluguel" if state.get("purpose") == "rent" else "compra"
                range_txt = "R$ 300 a R$ 50.000" if purpose == "rent" else "R$ 50.000 a R$ 10.000.000"
                msg = f"N√£o consegui identificar o valor. Por favor, informe o valor m√°ximo para {purpose_txt}.\n\nüí° Faixa v√°lida: {range_txt}\nüí° Exemplos: '500000', '500 mil', '500k'"
                log.info("handle_price_max_RETRY_MESSAGE", retry_count=retry_count, message=msg)
                return (msg, state, False)
    
    def handle_bedrooms(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de quartos."""
        import structlog
        log = structlog.get_logger()
        
        # Verificar contexto da resposta
        if not is_response_in_context(text, "bedrooms"):
            msg = get_context_validation_message("bedrooms")
            return (msg, state, False)
        
        ent = (state.get("llm_entities") or {})
        bedrooms_raw = ent.get("dormitorios")
        log.info("üõèÔ∏è handle_bedrooms START", text=text, llm_dormitorios=bedrooms_raw)
        
        if bedrooms_raw is None:
            bedrooms_raw = detect.extract_bedrooms(text)
            log.info("üõèÔ∏è extract_bedrooms fallback", extracted=bedrooms_raw)
        
        # Validar quartos
        bedrooms = validate_bedrooms(bedrooms_raw)
        log.info("üõèÔ∏è validated_bedrooms", validated=bedrooms)
        
        if bedrooms is not None or text.lower().strip() in ['tanto faz', 'qualquer', 'qualquer um', 'n√£o importa']:
            state["bedrooms"] = bedrooms  # None √© v√°lido para "tanto faz"
            log.info("üõèÔ∏è handle_bedrooms END", saved_bedrooms=bedrooms, state_keys=list(state.keys()))
            
            # Se j√° tem cidade (refinamento), buscar direto SEM mensagem
            if state.get("city"):
                state["stage"] = "searching"
                return ("", state, True)  # Busca silenciosa
            
            state["stage"] = "awaiting_city"
            msg = "Perfeito! Em qual cidade voc√™ est√° procurando?"
            return (msg, state, False)
        else:
            # Incrementar contador de tentativas
            retry_count = self._increment_retry_count(state, "awaiting_bedrooms")
            
            if self._check_retry_limit(state, "awaiting_bedrooms"):
                # Atingiu limite - usar valor padr√£o
                state = apply_fallback_values(state, "awaiting_bedrooms")
                
                if state.get("city"):
                    state["stage"] = "searching"
                    msg = get_retry_limit_message("awaiting_bedrooms", retry_count)
                    return (msg, state, False)
                else:
                    state["stage"] = "awaiting_city"
                    msg = get_retry_limit_message("awaiting_bedrooms", retry_count)
                    msg += "\n\nEm qual cidade voc√™ est√° procurando?"
                    return (msg, state, False)
            else:
                msg = "N√£o consegui identificar a quantidade de quartos. Por favor, responda:\n\n1Ô∏è‚É£ *1 quarto*\n2Ô∏è‚É£ *2 quartos*\n3Ô∏è‚É£ *3 quartos*\n4Ô∏è‚É£ *4 quartos*\n5Ô∏è‚É£ *Tanto faz*"
                return (msg, state, False)
    
    def handle_neighborhood(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de bairro."""
        if detect.is_skip_neighborhood(text):
            state["neighborhood"] = None
        else:
            state["neighborhood"] = text.strip().title()
        
        state["stage"] = "searching"
        return ("", state, True)  # Continuar para busca
    
    def handle_searching(self, sender_id: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de busca de im√≥veis."""
        import structlog
        log = structlog.get_logger()
        from app.domain.realestate.models import PropertyType, PropertyPurpose
        
        log.info("üîç handle_searching START", bedrooms_in_state=state.get("bedrooms"), state_keys=list(state.keys()))
        
        # Valida√ß√£o: corrigir price_min > price_max (erro comum de interpreta√ß√£o)
        price_min = state.get("price_min")
        price_max = state.get("price_max")
        if price_min is not None and price_max is not None:
            if float(price_min) > float(price_max):
                log.warning("price_min_greater_than_max_fixing", 
                           price_min=price_min, price_max=price_max)
                # Inverter valores
                state["price_min"], state["price_max"] = price_max, price_min
                price_min, price_max = state["price_min"], state["price_max"]
        
        # Log dos crit√©rios de busca
        log.info("searching_criteria", 
                 purpose=state.get("purpose"),
                 type=state.get("type"),
                 city=state.get("city"),
                 price_min=price_min,
                 price_max=price_max,
                 bedrooms=state.get("bedrooms"))
        
        # Montar query
        stmt = select(Property).where(Property.is_active == True)
        
        if state.get("purpose"):
            stmt = stmt.where(Property.purpose == PropertyPurpose(state["purpose"]))
        if state.get("type"):
            stmt = stmt.where(Property.type == PropertyType(state["type"]))
        if state.get("city"):
            stmt = stmt.where(Property.address_city.ilike(f"%{state['city']}%"))
        if state.get("neighborhood"):
            stmt = stmt.where(Property.address_neighborhood.ilike(f"%{state['neighborhood']}%"))
        if state.get("price_min") is not None:
            stmt = stmt.where(Property.price >= float(state["price_min"]))
        if state.get("price_max") is not None:
            stmt = stmt.where(Property.price <= float(state["price_max"]))
        if state.get("bedrooms") is not None:
            stmt = stmt.where(Property.bedrooms == int(state["bedrooms"]))
        
        stmt = stmt.limit(20)
        
        # DEBUG: Log da query SQL gerada
        log.info("üîç SQL Query Debug", 
                 query_str=str(stmt.compile(compile_kwargs={"literal_binds": True})))
        
        results = self.db.execute(stmt).scalars().all()
        log.info("üîç Query Results", count=len(results))
        
        if not results:
            # Sem resultados - salvar lead
            LeadService.create_unqualified_lead(
                self.db,
                sender_id,
                state,
                state.get("lgpd_consent", False)
            )
            user_name = state.get("user_name", "")
            msg = fmt.format_no_results_message(state.get("city", "sua cidade"), user_name)
            # IMPORTANTE: Manter TODOS os crit√©rios para permitir refinamento pontual
            state["stage"] = "awaiting_refinement"
            return (msg, state, False)
        
        # Salvar IDs dos resultados
        state["search_results"] = [r.id for r in results]
        state["current_property_index"] = 0
        state["stage"] = "showing_property"
        return ("", state, True)  # Continuar para mostrar primeiro im√≥vel
    
    def handle_showing_property(self, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de apresenta√ß√£o de im√≥veis."""
        results = state.get("search_results", [])
        idx = state.get("current_property_index", 0)
        
        # Se n√£o h√° mais im√≥veis
        if idx >= len(results):
            msg = fmt.format_no_more_properties()
            state["stage"] = "awaiting_refinement"  # Aguardar decis√£o de ajustar crit√©rios
            return (msg, state, False)
        
        # Buscar pr√≥ximo im√≥vel
        prop_id = results[idx]
        prop = self.db.get(Property, prop_id)
        
        if not prop:
            # Im√≥vel n√£o encontrado, pular para pr√≥ximo
            state["current_property_index"] = idx + 1
            return ("", state, True)
        
        # Formatar card do im√≥vel com contador
        prop_details = {
            "id": prop.id,
            "ref_code": prop.ref_code,
            "external_id": prop.external_id,
            "titulo": prop.title,
            "tipo": prop.type.value,
            "preco": prop.price,
            "cidade": prop.address_city,
            "estado": prop.address_state,
            "bairro": prop.address_neighborhood,
            "dormitorios": prop.bedrooms,
        }

        # Registrar im√≥vel mostrado
        shown_list = state.get("shown_properties") or []
        shown_list.append({
            "id": prop.id,
            "ref_code": prop.ref_code,
            "external_id": prop.external_id,
        })
        state["shown_properties"] = shown_list
        
        # Adicionar contador: "Im√≥vel 1 de 3"
        total = len(results)
        current = idx + 1
        counter = f"\n\nüìä Im√≥vel {current} de {total}" if total > 1 else ""
        
        user_name = state.get("user_name", "")
        msg = fmt.format_property_card(prop_details, state.get("purpose", "rent"), user_name) + counter
        state["stage"] = "awaiting_property_feedback"
        return (msg, state, False)
    
    def _detect_refinement_intent(self, text: str, state: Dict[str, Any]) -> Optional[Tuple[str, Dict[str, Any], bool]]:
        """
        Detecta inten√ß√£o de refinamento e retorna a√ß√£o apropriada.
        
        Returns:
            None se n√£o for refinamento
            (mensagem, state, continue_loop) se for refinamento
        """
        text_lower = text.lower()
        llm_entities = state.get("llm_entities") or {}
        
        # 1. QUARTOS - se j√° especificou n√∫mero, aplicar direto
        bedrooms_from_llm = llm_entities.get("dormitorios")
        if bedrooms_from_llm and any(kw in text_lower for kw in ["quarto", "dormit√≥rio", "dormitorio"]):
            state["bedrooms"] = bedrooms_from_llm
            state["stage"] = "searching"
            return ("", state, True)  # Busca silenciosa
        
        # 2. QUARTOS - mencionou mas n√£o especificou n√∫mero
        if any(kw in text_lower for kw in ["mudar quarto", "alterar quarto", "outro quarto", "quartos"]) and not bedrooms_from_llm:
            msg = "Entendido! Quantos *quartos* voc√™ precisa?"
            state["stage"] = "awaiting_bedrooms"
            return (msg, state, False)
        
        # 3. PRE√áO M√ÅXIMO - se j√° especificou, aplicar direto
        price_max_from_llm = llm_entities.get("preco_max")
        if price_max_from_llm and any(kw in text_lower for kw in ["valor m√°ximo", "pre√ßo m√°ximo", "valor maximo", "preco maximo"]):
            state["price_max"] = price_max_from_llm
            state["stage"] = "searching"
            return ("", state, True)
        
        # 4. PRE√áO M√ÅXIMO - mencionou mas n√£o especificou
        if any(kw in text_lower for kw in ["valor m√°ximo", "pre√ßo m√°ximo", "valor maximo", "preco maximo", "aumentar valor", "mais caro"]):
            msg = "Entendido! Qual o *novo valor m√°ximo* que voc√™ considera?"
            state["stage"] = "awaiting_price_max"
            return (msg, state, False)
        
        # 5. PRE√áO M√çNIMO - se j√° especificou, aplicar direto
        price_min_from_llm = llm_entities.get("preco_min")
        if price_min_from_llm and any(kw in text_lower for kw in ["valor m√≠nimo", "pre√ßo m√≠nimo", "valor minimo", "preco minimo"]):
            state["price_min"] = price_min_from_llm
            state["stage"] = "searching"
            return ("", state, True)
        
        # 6. PRE√áO M√çNIMO - mencionou mas n√£o especificou
        if any(kw in text_lower for kw in ["valor m√≠nimo", "pre√ßo m√≠nimo", "valor minimo", "preco minimo", "diminuir valor", "mais barato"]):
            msg = "Entendido! Qual o *novo valor m√≠nimo* que voc√™ considera?"
            state["stage"] = "awaiting_price_min"
            return (msg, state, False)
        
        # 7. TIPO - se j√° especificou, aplicar direto (com valida√ß√£o anti-alucina√ß√£o)
        new_type = llm_entities.get("tipo")
        invalid_types = ["ajustar", "ajustar_criterios", "ajustar_valor", "null"]
        type_keywords = {
            "house": ["casa"],
            "apartment": ["apartamento", "ap"],
            "commercial": ["comercial", "loja", "sala"],
            "land": ["terreno", "lote"]
        }
        
        # Fallback: detectar tipo por regex quando LLM falhar
        if not new_type or new_type in invalid_types or new_type == "":
            if any(kw in text_lower for kw in ["casa"]):
                new_type = "house"
            elif any(kw in text_lower for kw in ["apartamento", "ap", "apto"]):
                new_type = "apartment"
            elif any(kw in text_lower for kw in ["comercial", "loja", "sala"]):
                new_type = "commercial"
            elif any(kw in text_lower for kw in ["terreno", "lote"]):
                new_type = "land"
        
        if new_type and new_type not in invalid_types:
            keywords = type_keywords.get(new_type, [])
            if any(kw in text_lower for kw in keywords):
                state["type"] = new_type
                state["stage"] = "searching"
                return ("", state, True)
        
        # 8. TIPO - mencionou mas n√£o especificou
        if any(kw in text_lower for kw in ["mudar tipo", "alterar tipo", "outro tipo"]):
            msg = "Entendido! Voc√™ prefere *casa*, *apartamento*, *comercial* ou *terreno*?"
            state["stage"] = "awaiting_type"
            return (msg, state, False)
        
        # 9. CIDADE - se j√° especificou, aplicar direto
        city_from_llm = llm_entities.get("cidade")
        if city_from_llm and any(kw in text_lower for kw in ["cidade", "mudar cidade", "outra cidade"]):
            state["city"] = city_from_llm
            state["stage"] = "searching"
            return ("", state, True)
        
        # 10. CIDADE - mencionou mas n√£o especificou
        if any(kw in text_lower for kw in ["mudar cidade", "outra cidade", "cidade"]) and not city_from_llm:
            msg = "Entendido! Em qual *cidade* voc√™ gostaria de buscar?"
            state["stage"] = "awaiting_city"
            return (msg, state, False)
        
        # 11. BAIRRO - mencionou
        if any(kw in text_lower for kw in ["mudar bairro", "outro bairro", "bairro"]):
            msg = "Entendido! Qual *bairro* voc√™ prefere?"
            state["stage"] = "awaiting_neighborhood"
            return (msg, state, False)
        
        # 12. FINALIDADE - se j√° especificou, resetar pre√ßos e perguntar novamente
        purpose_from_llm = llm_entities.get("finalidade")
        current_purpose = state.get("purpose")
        
        # Fallback: detectar finalidade por regex quando LLM falhar
        if not purpose_from_llm or purpose_from_llm == "":
            if any(kw in text_lower for kw in ["comprar", "compra", "venda", "vender"]):
                purpose_from_llm = "sale"
            elif any(kw in text_lower for kw in ["alugar", "aluguel", "loca√ß√£o", "locacao", "locar"]):
                purpose_from_llm = "rent"
        
        if purpose_from_llm and purpose_from_llm != current_purpose and any(kw in text_lower for kw in ["comprar", "alugar", "vender", "loca√ß√£o", "aluguel", "finalidade", "compra", "venda", "locar"]):
            # Mudou finalidade - resetar pre√ßos (valores incompat√≠veis)
            state["purpose"] = purpose_from_llm
            state["price_min"] = None
            state["price_max"] = None
            
            purpose_txt = "ALUGUEL" if purpose_from_llm == "rent" else "COMPRA"
            old_purpose_txt = "COMPRA" if current_purpose == "sale" else "ALUGUEL"
            
            msg = (
                f"Entendido! Como voc√™ mudou de *{old_purpose_txt}* para *{purpose_txt}*, "
                f"preciso reajustar os valores de pre√ßo. üí∞\n\n"
                f"Qual o valor *m√°ximo* que voc√™ pode investir?"
            )
            state["stage"] = "awaiting_price_max"
            return (msg, state, False)
        
        # 13. FINALIDADE - mencionou mas n√£o especificou
        if any(kw in text_lower for kw in ["mudar finalidade", "outra finalidade"]):
            msg = "Entendido! Voc√™ quer *comprar* ou *alugar*?"
            state["stage"] = "awaiting_purpose"
            return (msg, state, False)
        
        # 14. Refinamento gen√©rico - mostrar crit√©rios atuais
        llm_intent = state.get("llm_intent", "")
        if llm_intent == "ajustar_criterios" or any(kw in text_lower for kw in ["ajustar", "refinar", "mudar crit√©rio", "mudar criterio", "nova busca"]):
            current_criteria = []
            if state.get("purpose"):
                current_criteria.append(f"‚Ä¢ Finalidade: {self._translate_purpose(state['purpose'])}")
            if state.get("type"):
                current_criteria.append(f"‚Ä¢ Tipo: {self._translate_type(state['type'])}")
            if state.get("price_min"):
                current_criteria.append(f"‚Ä¢ Valor m√≠nimo: R$ {state['price_min']:,.2f}")
            if state.get("price_max"):
                current_criteria.append(f"‚Ä¢ Valor m√°ximo: R$ {state['price_max']:,.2f}")
            if state.get("bedrooms"):
                current_criteria.append(f"‚Ä¢ Quartos: {state['bedrooms']}")
            if state.get("city"):
                current_criteria.append(f"‚Ä¢ Cidade: {state['city']}")
            if state.get("neighborhood"):
                current_criteria.append(f"‚Ä¢ Bairro: {state['neighborhood']}")
            
            criteria_text = "\n".join(current_criteria) if current_criteria else "Nenhum crit√©rio definido ainda."
            
            msg = (
                f"üìã *Seus crit√©rios atuais:*\n{criteria_text}\n\n"
                "O que voc√™ gostaria de ajustar? Exemplos:\n"
                "‚Ä¢ \"mudar o valor m√°ximo\"\n"
                "‚Ä¢ \"quero apartamento\"\n"
                "‚Ä¢ \"buscar em outra cidade\"\n"
                "‚Ä¢ \"quero 3 quartos\"\n"
                "‚Ä¢ \"mudar o bairro\""
            )
            state["stage"] = "awaiting_refinement"
            return (msg, state, False)
        
        return None  # N√£o √© refinamento
    
    def handle_property_feedback(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de feedback do im√≥vel apresentado."""
        # PRIORIDADE 1: Detectar refinamento (qualquer crit√©rio)
        refinement_result = self._detect_refinement_intent(text, state)
        if refinement_result:
            return refinement_result

        # PRIORIDADE 1.5: Encerrar por "N√£o encontrei im√≥vel"
        if detect.detect_no_match(text):
            sender_id = state.get("sender_id", "")
            # Persistir lead como sem_imovel_disponivel com prefer√™ncias e hist√≥rico
            prefs = dict(state)
            LeadService.create_unqualified_lead(
                self.db,
                sender_id,
                prefs,
                state.get("lgpd_consent", False)
            )
            user_name = state.get("user_name", "")
            msg = fmt.format_no_match_final(user_name)
            return (msg, {}, False)
        
        # PRIORIDADE 2: Interesse no im√≥vel
        if detect.detect_interest(text):
            # Cliente interessado - mostrar detalhes
            results = state.get("search_results", [])
            idx = state.get("current_property_index", 0)
            prop_id = results[idx]
            prop = self.db.get(Property, prop_id)
            
            if not prop:
                msg = "Desculpe, houve um erro. Vamos para o pr√≥ximo im√≥vel."
                state["current_property_index"] = idx + 1
                state["stage"] = "showing_property"
                return (msg, state, True)
            
            # Buscar as 3 primeiras imagens (ordenadas por sort_order)
            images = self.db.execute(
                select(PropertyImage)
                .where(PropertyImage.property_id == prop_id)
                .order_by(PropertyImage.sort_order.asc())
                .limit(3)
            ).scalars().all()
            
            image_urls = [img.url for img in images] if images else []
            
            prop_details = {
                "descricao": prop.description,
                "dormitorios": prop.bedrooms,
                "banheiros": prop.bathrooms,
                "vagas": prop.parking_spots,
                "area_total": prop.area_total,
                "images": image_urls,  # Adicionar URLs das imagens
            }
            
            user_name = state.get("user_name", "")
            msg = fmt.format_property_details(prop_details, user_name)
            state["interested_property_id"] = prop_id
            state["property_detail_images"] = image_urls  # Armazenar para MCP enviar
            # Registrar im√≥vel detalhado
            detailed_list = state.get("detailed_properties") or []
            detailed_list.append({
                "id": prop.id,
                "ref_code": getattr(prop, "ref_code", None),
                "external_id": getattr(prop, "external_id", None),
            })
            state["detailed_properties"] = detailed_list
            state["stage"] = "awaiting_visit_decision"
            return (msg, state, False)
        
        elif detect.detect_next_property(text):
            # Pr√≥ximo im√≥vel
            state["current_property_index"] = state.get("current_property_index", 0) + 1
            state["stage"] = "showing_property"
            return ("", state, True)
        else:
            # Fallback
            msg = "Gostou deste im√≥vel? Digite *'sim'* para mais detalhes, *'pr√≥ximo'* para ver outra op√ß√£o, *'ajustar crit√©rios'* para refinar a busca ou *'n√£o encontrei im√≥vel'* para encerrar."
            return (msg, state, False)
    
    def handle_visit_decision(self, text: str, sender_id: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de decis√£o de agendamento."""
        # PRIORIDADE 0: Se j√° pediu agendamento antes, qualquer resposta positiva avan√ßa
        # (usu√°rio pode responder "sim", "quero", "est√° correto", etc.)
        text_lower = text.lower().strip()
        positive_responses = ["sim", "quero", "agendar", "marcar", "visita", "correto", "ok", "confirmo"]
        if any(word in text_lower for word in positive_responses):
            # Ir direto para confirma√ß√£o de telefone
            phone = sender_id.split("@")[0] if "@" in sender_id else sender_id
            state["visit_phone"] = phone
            state["stage"] = "awaiting_phone_confirmation"
            msg = fmt.format_confirm_phone(phone)
            return (msg, state, False)
        
        # PRIORIDADE 1: Detectar refinamento (qualquer crit√©rio)
        refinement_result = self._detect_refinement_intent(text, state)
        if refinement_result:
            return refinement_result

        # PRIORIDADE 1.5: Encerrar por "N√£o encontrei im√≥vel"
        if detect.detect_no_match(text):
            sender_id = state.get("sender_id", "")
            prefs = dict(state)
            LeadService.create_unqualified_lead(
                self.db,
                sender_id,
                prefs,
                state.get("lgpd_consent", False)
            )
            user_name = state.get("user_name", "")
            msg = fmt.format_no_match_final(user_name)
            return (msg, {}, False)
        # PRIORIDADE 2.1: Recusa de agendamento -> classificar como qualificado e encerrar
        elif detect.detect_decline_schedule(text):
            try:
                from app.services.lead_service import LeadService as _LS
                _LS.mark_qualified(self.db, state.get("sender_id", ""), state)
            except Exception:
                pass
            msg = "Sem problemas! Se mudar de ideia, √© s√≥ me chamar. üòä\n\nPosso te ajudar com algo mais?"
            return (msg, {}, False)
        elif detect.detect_next_property(text):
            # Pr√≥ximo im√≥vel
            state["current_property_index"] = state.get("current_property_index", 0) + 1
            state["stage"] = "showing_property"
            return ("", state, True)
        else:
            # Fallback
            msg = "Digite *'agendar'* para marcar uma visita, *'pr√≥ximo'* para ver outras op√ß√µes, *'ajustar crit√©rios'* para refinar a busca ou *'n√£o encontrei im√≥vel'* para encerrar."
            return (msg, state, False)
    
    def handle_refinement(self, text: str, state: Dict[str, Any]) -> Tuple[str, Dict[str, Any], bool]:
        """Est√°gio de decis√£o ap√≥s ver todos os im√≥veis ou n√£o gostar."""
        import structlog
        log = structlog.get_logger()
        
        # ===== PASSO 1: LLM INTERPRETA A INTEN√á√ÉO =====
        llm_entities = state.get("llm_entities", {})
        text_lower = text.lower()
        
        log.info("refinement_llm_entities", entities=llm_entities, text=text)
        
        # ===== REFINAMENTO INTELIGENTE =====
        # Detectar qual campo espec√≠fico o usu√°rio quer mudar
        # ORDEM: 1) LLM entities, 2) Regex espec√≠fico, 3) Fallback educado
        
        # 0. Mudan√ßa de QUARTOS (se j√° especificou n√∫mero)
        bedrooms_from_llm = llm_entities.get("dormitorios")
        if bedrooms_from_llm and any(kw in text_lower for kw in ["quarto", "dormit√≥rio", "dormitorio"]):
            # Usu√°rio j√° disse "quero 3 quartos" - aplicar direto
            state["bedrooms"] = bedrooms_from_llm
            if state.get("city"):
                state["stage"] = "searching"
                return ("", state, True)  # Busca silenciosa
            else:
                msg = "Perfeito! Em qual cidade voc√™ est√° procurando?"
                state["stage"] = "awaiting_city"
                return (msg, state, False)
        
        # 1. Mudan√ßa de PRE√áO M√ÅXIMO (verificar ANTES de tipo)
        if any(kw in text_lower for kw in ["valor m√°ximo", "pre√ßo m√°ximo", "valor maximo", "preco maximo", "aumentar valor", "mais caro"]):
            msg = "Entendido! Qual o *novo valor m√°ximo* que voc√™ considera?"
            state["stage"] = "awaiting_price_max"
            return (msg, state, False)
        
        # 2. Mudan√ßa de TIPO (validar palavra-chave para evitar alucina√ß√£o)
        new_type = llm_entities.get("tipo")
        invalid_types = ["ajustar", "ajustar_criterios", "ajustar_valor", "null"]
        type_keywords = {
            "house": ["casa"],
            "apartment": ["apartamento", "ap"],
            "commercial": ["comercial", "loja", "sala"],
            "land": ["terreno", "lote"]
        }
        
        # S√≥ aceita se: tipo v√°lido + n√£o √© mudan√ßa de pre√ßo + usu√°rio mencionou palavra-chave
        if new_type and new_type not in invalid_types and not any(kw in text_lower for kw in ["valor", "pre√ßo", "preco"]):
            # Verificar se usu√°rio realmente mencionou o tipo
            keywords = type_keywords.get(new_type, [])
            if any(kw in text_lower for kw in keywords):
                state["type"] = new_type
                state["stage"] = "searching"
                return ("", state, True)  # Busca silenciosa
        
        # Fallback para tipo por palavra-chave (se n√£o for pre√ßo)
        if any(kw in text_lower for kw in ["apartamento", "casa", "comercial", "terreno"]) and not any(kw in text_lower for kw in ["valor", "pre√ßo", "preco"]):
            # Detectar qual tipo
            if "apartamento" in text_lower or "ap" in text_lower.split():
                new_type = "apartment"
            elif "casa" in text_lower:
                new_type = "house"
            elif "comercial" in text_lower:
                new_type = "commercial"
            elif "terreno" in text_lower:
                new_type = "land"
            
            if new_type:
                state["type"] = new_type
                state["stage"] = "searching"
                return ("", state, True)  # Busca silenciosa
        
        # 4. Mudan√ßa de CIDADE
        if any(kw in text_lower for kw in ["cidade", "outra cidade", "mudar cidade", "local", "regi√£o"]):
            msg = "Entendido! Em qual *cidade* voc√™ gostaria de buscar?"
            state["stage"] = "awaiting_city"
            return (msg, state, False)
        
        # 5. Mudan√ßa de BAIRRO
        if any(kw in text_lower for kw in ["bairro", "outro bairro", "mudar bairro"]):
            msg = "Entendido! Qual *bairro* voc√™ prefere?"
            state["stage"] = "awaiting_neighborhood"
            return (msg, state, False)
        
        # 6. Mudan√ßa de QUARTOS
        if any(kw in text_lower for kw in ["quartos", "dormit√≥rios", "dormitorios", "quarto"]):
            msg = "Entendido! Quantos *quartos* voc√™ precisa?"
            state["stage"] = "awaiting_bedrooms"
            return (msg, state, False)
        
        # 7. RESETAR TUDO (apenas se expl√≠cito)
        if any(kw in text_lower for kw in ["tudo", "do zero", "recome√ßar", "resetar", "come√ßar de novo"]):
            msg = "Perfeito! Vamos recome√ßar. Voc√™ quer *comprar* ou *alugar*?"
            new_state = {
                "stage": "awaiting_purpose",
                "lgpd_consent": state.get("lgpd_consent", True)
            }
            return (msg, new_state, False)
        
        # 8. Fallback educado: n√£o entendeu, pede para ser mais espec√≠fico
        current_criteria = []
        if state.get("purpose"):
            current_criteria.append(f"‚Ä¢ Finalidade: {self._translate_purpose(state['purpose'])}")
        if state.get("type"):
            current_criteria.append(f"‚Ä¢ Tipo: {self._translate_type(state['type'])}")
        if state.get("price_min"):
            current_criteria.append(f"‚Ä¢ Valor m√≠nimo: R$ {state['price_min']:,.2f}")
        if state.get("price_max"):
            current_criteria.append(f"‚Ä¢ Valor m√°ximo: R$ {state['price_max']:,.2f}")
        if state.get("bedrooms_min"):
            current_criteria.append(f"‚Ä¢ Quartos: {state['bedrooms_min']}+")
        if state.get("city"):
            current_criteria.append(f"‚Ä¢ Cidade: {state['city']}")
        
        criteria_text = "\n".join(current_criteria) if current_criteria else "Nenhum crit√©rio definido ainda."
        
        msg = (
            f"Desculpe, n√£o entendi exatamente o que voc√™ quer ajustar. üòÖ\n\n"
            f"üìã *Seus crit√©rios atuais:*\n{criteria_text}\n\n"
            "Seja mais espec√≠fico, por favor. Exemplos:\n"
            "‚Ä¢ \"ajustar o valor m√°ximo\"\n"
            "‚Ä¢ \"mudar para apartamento\"\n"
            "‚Ä¢ \"buscar em outra cidade\"\n"
            "‚Ä¢ \"quero 3 quartos\"\n"
            "‚Ä¢ \"recome√ßar do zero\""
        )
        return (msg, state, False)
    
    def _translate_purpose(self, purpose: str) -> str:
        """Traduz finalidade para portugu√™s."""
        return "Compra" if purpose == "sale" else "Aluguel"
    
    def _translate_type(self, prop_type: str) -> str:
        """Traduz tipo de im√≥vel para portugu√™s."""
        translations = {
            "house": "casa",
            "apartment": "apartamento",
            "commercial": "comercial",
            "land": "terreno"
        }
        return translations.get(prop_type, prop_type)
